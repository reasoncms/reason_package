<?php
require_once(SETTINGS_INC.'media_integration/media_settings.php');
reason_include_once('classes/media/interfaces/media_work_displayer_interface.php');
reason_include_once( 'classes/av_display.php' );
/**
 * Class used for generating html markup that displays media works that aren't integrated with 
 * another service like Kaltura.  This class shouldn't be directly used by modules.  Instead,
 * it's better if a module uses a displayer_chrome module, which uses this class when generating
 * markup.
 *
 * @author Marcus Huderle
 */ 
class DefaultMediaWorkDisplayer implements MediaWorkDisplayerInterface
{
	/**
	 * @var object reason media work
	 */
	protected $media_work;
	
	/**
	 * @var array media files associated with the media work.
	 */
	protected $media_files;
	
	/**
	 * @var object current media file to display.
	 */
	protected $current_media_file;

	/** 
	 * @var bool show controls flag;
	 */
	protected $show_controls = true;
	
	/** 
	 * @var bool autostart flag
	 */
	protected $autostart = false;
	
	/**
	 * @var int width of display
	 */
	protected $width = 0;
	
	/**
	 * @var int height of display
	 */
	protected $height = 0;
	
	/**
	 * @var array fallback video dimensions for when no width/height are specified on a media file.
	 */
	protected $default_video_dimensions = array('width'=>'480','height'=>'360');
	
	/**
	 * @var string the most recent tech note generated by this displayer
	 */
	protected $latest_tech_note = '';

	/**
	 * Assigns the given media work to the displayer. Sets the current media file to the first
	 * one associated with the given media work.
	 * @param $media_work object
	 */
	public function set_media_work($media_work) {
		$this->media_work = $media_work;
		$this->media_files = $this->get_media_files();
		$this->current_media_file = current($this->media_files);
	}
	
	/**
	 * Sets the current media file being displayed.
	 * @param $media_file entity
	 */
	public function set_current_media_file($media_file)
	{
		if (!is_object($media_file))
		{
			$media_file = new entity($media_file);
		}
		$this->current_media_file = $media_file;
	}
	
	private function get_current_media_file()
	{
		if ($this->current_media_file)
		{
			return $this->current_media_file;
		}
		$media_files = $this->get_media_files();
		return reset($media_files);
	}
	
	/**
	 * Calculates the aspect ratio (width/height) of a media file for the current size of 
	 * the displayer.
	 *
	 * @param object $media_file
	 * @return mixed float $aspect_ratio or false if no files
	 */
	function get_video_aspect_ratio($media_file)
	{			
		$width = (float)$media_file->get_value('width');
		$height = (float)$media_file->get_value('height');
		if (!$width || !$height)
		{
			return $this->default_video_dimensions['width']/$this->default_video_dimensions['height'];
		}
		return $width/$height;
	}
	
	/**
	 * Returns a width generated from the aspect ratio of the original media work.  If no height is specified,
	 * it falls back to get_default_width().
	 *
	 * @return int
	 */
	function _get_width_from_height()
	{	
		$current = $this->get_current_media_file();
		if ($current)
		{
			$height = $this->_get_height() ? $this->_get_height() : $current->get_value('height');
			return $this->width ? $this->width : $this->get_video_aspect_ratio($current)*$height;
		}
		else
		{
			return 0;
		}
	}
	
	/**
	 * Returns a height generated from the aspect ratio of the media work.  If no width is specified,
	 * it falls back to get_default_height().
	 *
	 * @access private
	 * @return int
	 */
	private function _get_height_from_width()
	{
		if ( !empty($this->width) )
		{
			$aspect_ratio = $this->get_video_aspect_ratio($this->get_current_media_file());
			if ($aspect_ratio != false)
				return $this->width / $aspect_ratio + 20;
		}
		$current = $this->get_current_media_file();
		return $current->get_value('height');
	}	
	
	/**
	 * Returns an int keeping in mind the allowed enums.
	 *
	 * @return int
	 */ 
	private function _get_height()
	{
		$cur_file = $this->get_current_media_file();
		if ($cur_file)
		{
			if ($cur_file->get_value('media_format') == 'Flash Video')
			{
				if ($this->height === 'small')
				{
					return MEDIA_WORK_SMALL_HEIGHT;
				}
				elseif ($this->height === 'medium')
				{
					return MEDIA_WORK_MEDIUM_HEIGHT;
				}
				elseif ($this->height === 'large')
				{
					return MEDIA_WORK_LARGE_HEIGHT;
				}
				else
				{
					return $this->height;
				}
			}
			else
			{
				if ($cur_file->get_value('height'))
				{
					return $cur_file->get_value('height');
				}
				else
				{
					return $this->default_video_dimensions['height'];
				}
			}
		}
		else
		{
			return 0;
		}
	}
 	
 	/**
 	 * Returns the html to display the media.
 	 * @return string
 	 */
 	public function get_display_markup()
 	{
 		if (isset($this->media_work))
		{
			$media_files = $this->get_media_files();
			if (count($media_files) > 0)
			{
				$current = $this->get_current_media_file();
				if ($current->get_value('av_type') == 'Video')
				{
					$iframe_height = $this->_get_height() ? $this->_get_height() : $this->_get_height_from_width();
					$iframe_width = $this->width ? $this->width : $this->get_video_aspect_ratio($current)*$iframe_height;
					
					if ($current->get_value('media_format') == 'Quicktime')
					{
						$iframe_height += 15;
					} 
					elseif ($current->get_value('media_format') == 'Real')
					{
						$iframe_height += 20;
					}
				}
				else // for audio
				{
					$height = false;
					$iframe_height = 20;
					$iframe_width = 300;
				}
				//add video or audio class using string on object
				$markup = '<iframe class="media_file_iframe ' . strtolower($current->get_value('av_type')) . '" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" allowfullscreen="allowfullscreen" height="'.intval($iframe_height).'" width="'.intval($iframe_width).'" ';
				
				$markup .= 'src="'.$this->get_iframe_src($iframe_height, $iframe_width).'" ';

				$av_type = $this->media_work->get_value('av_type');
				if(!empty($av_type))
					$markup .= 'title="'.reason_htmlspecialchars($av_type).'" ';
				
				$markup .= '>';
				$markup .= '</iframe>'."\n";
	
				return $markup;
			}
		}
		return false;
 	}
 	
 	public function get_iframe_src($iframe_height, $iframe_width, $media_file = null)
	{
		$cur_file = $media_file ? $media_file : $this->get_current_media_file();
		if ($cur_file)
		{
			$hash = $this->get_hash();
			$src = '//'.HTTP_HOST_NAME.REASON_HTTP_BASE_PATH.'scripts/media/media_iframe.php?media_work_id='.$this->media_work->id().'&amp;hash='.$hash;
			
			$controlbar_height = 0;
			if ($cur_file && $cur_file->get_value('media_format') == 'Flash Video')
			{
				$controlbar_height = 20;
			}
			
			$src .= '&amp;height='.(intval($iframe_height)-$controlbar_height);
			$src .= '&amp;width='.intval($iframe_width);
				
			if ($this->autostart)
				$src .= '&amp;autostart=1';
				
			if (!$this->show_controls)
				$src .= '&amp;show_controls=false';
			
			if ($media_file)
			{
				$src .= '&amp;media_file_id='.$media_file->id();
			}
			else
			{
				$src .= '&amp;media_file_id='.$this->current_media_file->id();
			}
			
			return $src;
		}
		else
		{
			return false;
		}
	}
 	
 	/**
 	 * Returns the html markup that can embed the media on a page.
 	 * @return string
 	 */
 	public function get_embed_markup()
 	{
 		if (!$this->media_work) return '';
 		
 		if ($this->current_media_file)
 		{
	 		$avd = new reasonAVDisplay();
	 		$height = $this->get_embed_height();
			$width = $this->get_embed_width();

			$avd->set_video_dimensions($width, $height);
			$avd->set_audio_dimensions(0, 0);
			
	 		if (!$this->show_controls)
	 		{
				$avd->set_parameter('flv', 'controlbar', 'false');
				$avd->set_parameter('qt', 'controller', '0');
				$avd->set_parameter('wmv', 'ShowControls', 'false');
	 		}
	 		
	 		if (!$this->autostart)
	 			$avd->disable_automatic_play_start();
	 		
	 		if($image_info = reason_get_media_placard_image_info($this->current_media_file))
			{
				$avd->set_placard_image($image_info['url']);
				$avd->set_placard_image_dimensions($image_info['width'], $image_info['height']);
			}
	 		$this->latest_tech_note = $avd->get_tech_note($this->current_media_file);
	 		$embed_markup = $avd->get_embedding_markup($this->current_media_file);
	 		return $embed_markup;
	 	}
	 	else
	 	{
	 		return '';
	 	}
 	}
 	public function get_embed_height()
 	{
 		return $this->_get_height() ? $this->_get_height() : $this->get_current_media_file()->get_value('height');
 	}
 	
 	public function get_embed_width()
 	{
 		return $this->width ? $this->width : $this->get_video_aspect_ratio($this->get_current_media_file())*$this->get_embed_height();
 	}
 	
 	/**
 	 * Sets the width of the displayer.
 	 * @param $width int
 	 */
 	public function set_width($width) 
 	{
 		$this->width = $width;
 	}
 	
 	/**
 	 * Sets the height of the displayer.
 	 * @param $height int
 	 */
 	public function set_height($height) 
 	{
 		$this->height = $height;
 	}
 	
 	/**
 	 * Returns array of media files being used for playback.
 	 * @return array
 	 */
 	public function get_media_files() 
 	{
 		if (empty($this->media_files) && $this->media_work)
 		{
			$es = new entity_selector();
			$es->add_type(id_of('av_file'));
			$es->add_right_relationship($this->media_work->id(), relationship_id_of('av_to_av_file'));
			$this->media_files = $es->run_one();
		}
		return $this->media_files;
 	}
 	
	/**
	 * Sets whether or not the media should autoplay.
	 * @param $val bool
	 */
	public function set_autostart($val)
	{
		$this->autostart = $val;
	}

	/**
	 * Sets whether or not there should be controls overlayed on the video.
	 * @param $val bool
	 */
	public function set_show_controls($val)
	{
		$this->show_controls = $val;
	}
	
 	/**
 	 * Gets a hash associated with the current media work. Used for validating the iframe script.
 	 * @return string
 	 */
 	public function get_hash() 
 	{
 		if(empty($this->media_work))
			return NULL;
		return md5('media-work-hash-'.$this->media_work->id().'-'.$this->media_work->get_value('created_by').'-'.$this->media_work->get_value('creation_date'));
 	}
 	
	/**
	 * Gets a hash associated with the given media file and its associated media work.
	 */
	public function get_media_file_hash($media_file)
	{
		if (!is_object($media_file))
		{
			return null;
		}
		return md5($media_file->id().$media_file->get_value('created_by').$media_file->get_value('creation_date').$this->media_work->get_value('salt'));
	} 
	
	/**
 	 * Gets a hash for the end of the original filename when storing an original file.
 	 * @return string
 	 */
 	public function get_original_filename_hash()
 	{
 		if (!$this->media_work)
 		{
 			return null;
 		}
 		return md5($this->media_work->get_value('created_by').$this->media_work->get_value('creation_date').$this->media_work->get_value('salt'));
 	}
 	
 	public function get_latest_tech_note()
 	{
 		return $this->latest_tech_note;
 	}
}
?>